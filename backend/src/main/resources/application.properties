spring.application.name=pki
spring.docker.compose.enabled=false

# -- Keycloak --
# povlaci javni kljuc od keycloak-a i validira JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/pki
#spring.security.oauth2.resourceserver.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# postgresql config
spring.datasource.driverClassName=org.postgresql.Driver
spring.sql.init.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5434/backenddb

spring.datasource.username=admin
spring.datasource.password=admin

spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = false
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=always
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false


server.ssl.algorithm=${TLS_VERSION:TLSv1.3}
server.ssl.key-store=${KEYSTORE:src/main/resources/ssl/keystore_server.p12}
server.ssl.key-store-password=${KEYSTORE_PASSWORD:Password123}
server.ssl.key-alias=${KEYSTORE_ALIAS:server-cert}
server.ssl.enabled=true
server.ssl.client-auth=none

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

server.port = 8081